#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include "DHT.h"

// Change the credentials below, so your ESP8266 connects to your router
const char* ssid = "themakerguy";
const char* password = "damnuman";

// Change the variable to your Raspberry Pi IP address, so it connects to your MQTT broker
const char* mqtt_server = "192.168.43.176";

// Initializes the espClient. You should change the espClient name if you have multiple ESPs running in your home automation system
WiFiClient espClient;
PubSubClient client(espClient);

// DHT Sensor - D2&D3 on ESP-12E NodeMCU board
#define INDHT D2
#define OUTDHT D3
// Light Sensor - D0&D1 ESP-12E NodeMCU board
// TODO: change GPIO TO analog
#define INTLIGHT A0
#define OUTLIGHT D1
// Soil moisture sensors - A2&A3&A3 ESP-12E NodeMCU board
// TODO: change GPIO TO analog
#define MOISTURE1 D4
#define MOISTURE2 D5
#define MOISTURE3 D6

// Initialize DHT sensor. change the line below whatever DHT type you're using DHT11, DHT21 (AM2301), DHT22 (AM2302, AM2321)
DHT dht[] ={
  {INDHT, DHT11},
  {OUTDHT, DHT11}
};
// Initialize LDR sensor
float ldrs[] = {INTLIGHT, OUTLIGHT};
// Initialize Soil moisture sensors sensor
float moistures[] = {MOISTURE1, MOISTURE2, MOISTURE3};
// Timers auxiliar variables
unsigned long now = millis();
unsigned long lastMeasure = 0;

// Don't change the function below. This functions connects your ESP8266 to your router
void setup_wifi() {
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("WiFi connected - ESP IP address: ");
  Serial.println(WiFi.localIP());
}

// This functions reconnects your ESP8266 to your MQTT broker
// Change the function below if you want to subscribe to more topics with your ESP8266 
void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    /*
     YOU MIGHT NEED TO CHANGE THIS LINE, IF YOU'RE HAVING PROBLEMS WITH MQTT MULTIPLE CONNECTIONS
     To change the ESP device ID, you will have to give a new name to the ESP8266.
     Here's how it looks:
       if (client.connect("ESP8266Client")) {
     You can do it like this:
       if (client.connect("ESP1_Office")) {
     Then, for the other ESP:
       if (client.connect("ESP2_Garage")) {
      That should solve your MQTT multiple connections problem
    */
    if (client.connect("envsensors")) {
      Serial.println("connected");  
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

// The setup function sets your ESP GPIOs to Outputs, starts the serial communication at a baud rate of 115200
// Sets your mqtt broker and sets the callback function
// The callback function is what receives messages and actually controls the LEDs
void setup() {
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  // DHTs setup
  for(auto& sensor : dht){
    sensor.begin();
  }
  // LDRs sensor setup
  for(int i = 0; i < 2; i++){
    pinMode(ldrs[i], INPUT);
  }
  // MOISTURE sensors setup
  for(int i = 0; i < 3; i++){
    pinMode(moistures[i], INPUT);
  }

}

// For this project, you don't need to change anything in the loop function. Basically it ensures that you ESP is connected to your broker
void loop() {

  if (!client.connected()) {
    reconnect();
  }
  if(!client.loop())
    client.connect("envsensors");

  now = millis();
  // Publishes new temperature and humidity every 30 seconds
  if (now - lastMeasure > 30000) {
    lastMeasure = now;
    // initialize temperatures and humidities array to store read() values
    float humidities[2];
    float temperatures[2];
    // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
    for(int i = 0; i < 2; i++){
      humidities[i] = dht[i].readHumidity();
      temperatures[i] = dht[i].readTemperature();
    }

    // initialize LDR sensors array to store read() values
    float lSensors[2];
    // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
    for(int i = 0; i < 2; i++){
      lSensors[i] = analogRead(ldrs[i]);
    }

    // initialize MOISTURE sensors array to store read() values
    float sMoistures[3];
    // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
    for(int i = 0; i < 3; i++){
      sMoistures[i] = analogRead(moistures[i]);
    }


    // Convert float temperatures to string
    static char inTemperature[7];
    static char outTemperature[7];
    dtostrf(temperatures[0], 6, 2, inTemperature);
    dtostrf(temperatures[1], 6, 2, outTemperature);
    // Convert float humidities to string
    static char inHumidity[7];
    static char outHumidity[7];
    dtostrf(humidities[0], 6, 2, inHumidity);
    dtostrf(humidities[1], 6, 2, outHumidity);

    // Convert float LDR to string
    static char inlight[7];
    static char outlight[7];
    dtostrf(lSensors[0], 6, 2, inlight);
    dtostrf(lSensors[1], 6, 2, outlight);

    // Convert float MOISTURE to string
    static char moisture1[7];
    static char moisture2[7];
    static char moisture3[7];
    dtostrf(sMoistures[0], 6, 2, moisture1);
    dtostrf(sMoistures[1], 6, 2, moisture2);
    dtostrf(sMoistures[2], 6, 2, moisture3);

    // Publishes Temperature and Humidity values in string type
    client.publish("in/temperature", inTemperature);
    client.publish("in/humidity", inHumidity);
    client.publish("out/temperature", outTemperature);
    client.publish("out/humidity", outHumidity);
    
    // Publishes LDR values in string type
    client.publish("in/light", inlight);
    // client.publish("out/light", outlight);

    // published MOISTURE value in string type
    // client.publish("moisture/one", moisture1);
    // client.publish("moisture/two", moisture2);
    // client.publish("moisture/three", moisture3);
    
    Serial.print("in Humidity: ");
    Serial.print(temperatures[0]);
    Serial.print(" %\t in Temperature: ");
    Serial.print(humidities[0]);
    Serial.println(" *C ");
    Serial.print("out Humidity: ");
    Serial.print(temperatures[1]);
    Serial.print(" %\t out Temperature: ");
    Serial.print(humidities[1]);
    Serial.println(" *C ");
    // LDR sensors
    Serial.print("in Light: ");
    Serial.print(inlight);
    Serial.print(" of 1024\t out Light: ");
    Serial.print(lSensors[1]);
    Serial.println(" of 1024 ");
    // Moisture sensors
    Serial.print("moisture 1: ");
    Serial.print(sMoistures[0]);
    Serial.print(" of 1024\t moisture 2: ");
    Serial.print(sMoistures[1]);
    Serial.print(" of 1024\t moisture 3: ");
    Serial.print(sMoistures[2]);
    Serial.println(" of 1024 ");
  }
} 